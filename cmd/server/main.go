package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"connectrpc.com/connect"
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	"github.com/awslabs/aws-lambda-go-api-proxy/httpadapter"

	greetv1 "connect-lambda-localstack-demo/gen/greet/v1"        // generated by protoc-gen-go
	"connect-lambda-localstack-demo/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
)

var adapter *httpadapter.HandlerAdapter

type GreetServer struct{}

func (s *GreetServer) Greet(ctx context.Context, req *connect.Request[greetv1.GreetRequest]) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func (s *GreetServer) GetTime(ctx context.Context, req *connect.Request[greetv1.GetTimeRequest]) (*connect.Response[greetv1.GetTimeResponse], error) {
	log.Println("Request Timezone: ", req.Msg.Timezone)
	loc, _ := time.LoadLocation(req.Msg.Timezone)
	res := connect.NewResponse(&greetv1.GetTimeResponse{
		CurrentTime: time.Now().In(loc).Format(time.RFC3339),
	})
	return res, nil
}

func init() {
	greeter := &GreetServer{}
	mux := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)
	adapter = httpadapter.New(mux)
}

func Handler(ctx context.Context, req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	return adapter.ProxyWithContext(ctx, req)
}

func main() {
	lambda.Start(Handler)
}
